from sklearn.cluster import AgglomerativeClustering

from clustering.ensembles.utils import get_ensemble_distance_matrix


def eac(
    ensemble,
    k: int,
    linkage_method: str = "average",
    ensemble_is_coassoc_matrix: bool = False,
):
    """
    Using an Evidence Accumulation method (EAC) [1], it derives a consensus
    partition with k clusters from the clustering solutions in ensemble.

    [1] Fred, Ana L. N. and Jain, Anil K., "Combining Multiple Clusterings Using
    Evidence Accumulation", IEEE Trans. Pattern Anal. Mach. Intell., 27(6):
    835-850, 2005.

    Args:
        ensemble:
            Set of `p` clustering solutions generated by any clustering method.
            It must have `p` rows (number of clustering solutions) and `n`
            columns (number of data objects).
        k:
            Number of clusters that will have the `x` (consensus partition).
        linkage_method:
            Linkage criterion used for the hierachical algorithm applied on the
            ensemble. It supports any criterion provied by the `linkage`
            function of the `fastcluster` package.

    Returns:
        A 1D numpy array with the consensus clustering solution.
    """

    if ensemble_is_coassoc_matrix:
        y = ensemble
    else:
        y = get_ensemble_distance_matrix(ensemble)

    return AgglomerativeClustering(
        n_clusters=k,
        affinity="precomputed",
        linkage=linkage_method,
    ).fit_predict(y)


def eac_single(ensemble, k):
    """
    Shortcut to run EAC using the single linkage method on the ensemble.
    """
    return eac(ensemble, k, linkage_method="single")


def eac_single_coassoc_matrix(coassoc_matrix, k):
    """
    Shortcut to run EAC using the single linkage method on the coassociation
    matrix.
    """
    return eac(
        coassoc_matrix, k, ensemble_is_coassoc_matrix=True, linkage_method="single"
    )


def eac_complete(ensemble, k):
    """
    Shortcut to run EAC using the complete linkage method on the ensemble.
    """
    return eac(ensemble, k, linkage_method="complete")


def eac_complete_coassoc_matrix(coassoc_matrix, k):
    """
    Shortcut to run EAC using the complete linkage method on the coassociation
    matrix.
    """
    return eac(
        coassoc_matrix, k, ensemble_is_coassoc_matrix=True, linkage_method="complete"
    )


def eac_average(ensemble, k):
    """
    Shortcut to run EAC using the average linkage method on the ensemble.
    """
    return eac(ensemble, k, linkage_method="average")


def eac_average_coassoc_matrix(coassoc_matrix, k):
    """
    Shortcut to run EAC using the average linkage method on the coassociation
    matrix.
    """
    return eac(
        coassoc_matrix, k, ensemble_is_coassoc_matrix=True, linkage_method="average"
    )
